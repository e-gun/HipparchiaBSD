# qemu installation of FreeBSD itself
# /usr/local/bin/qemu-img create -f raw -o size=14G ./qemu-freebsd.raw
# /usr/local/bin/qemu-system-x86_64 -display vnc=localhost:1 -cdrom ./FreeBSD-11.0-RELEASE-i386-dvd1.iso -drive file=./qemu-freebsd.raw,format=raw -boot d
# /usr/local/bin/qemu-system-x86_64 -display vnc=localhost:1 -drive file=./qemu-freebsd.raw,format=raw -boot d -smp 3 \
# -device e1000,netdev=network0,mac=52:54:00:12:34:56 -netdev user,id=network0,hostfwd=tcp:127.0.0.1:2222-:22,hostfwd=tcp:127.0.0.1:8888-:80 

# [log in as huser]

su root
	root# pkg install nano nginx python36 rsync sudo postgresql10-server postgresql10-contrib curl git-lite
	root# visudo [and add huser]
	root# printf "\033[31mHipparchia Server\033[0m" > /etc/issue
	root# printf "\n\n\t\tWelcome to \033[31mHipparchia Server\033[0m\n\n\n" > /etc/motd
	root# exit

/usr/local/bin/bash

HIPPHOME="$HOME/hipparchia_venv"
SERVERPATH="$HIPPHOME/HipparchiaServer"
BUILDERPATH="$HIPPHOME/HipparchiaBuilder"
LOADERPATH="$HIPPHOME/HipparchiaSQLoader"
NIXPATH="$HIPPHOME/HipparchiaNIX"
MACPATH="$HIPPHOME/HipparchiaMacOS"
DATAPATH="$HIPPHOME/HipparchiaData"
THIRDPARTYPATH="$HIPPHOME/HipparchiaThirdPartySoftware"
EXTRAFONTPATH="$HIPPHOME/HipparchiaExtraFonts"
WINDOWSPATH="$HIPPHOME/HipparchiaWindows"
STATIC="$SERVERPATH/server/static"
TTF="$STATIC/ttf"
THEDB="hipparchiaDB"


RED='\033[0;31m'
YELLOW='\033[1;33m'
WHITE='\033[1;37m'
NC='\033[0m'


mkdir $HIPPHOME logs run $HIPPHOME $SERVERPATH $BUILDERPATH $LOADERPATH $NIXPATH $DATAPATH $MACPATH $WINDOWSPATH $THIRDPARTYPATH
cd $SERVERPATH/ && git init && git pull https://github.com/e-gun/HipparchiaServer.git && git remote add origin https://github.com/e-gun/HipparchiaServer.git
cd $BUILDERPATH/ && git init && git remote add origin https://github.com/e-gun/HipparchiaBuilder.git && git pull origin simpleconnections
cd $LOADERPATH/ && git init && git pull https://github.com/e-gun/HipparchiaSQLoader.git && git remote add origin https://github.com/e-gun/HipparchiaSQLoader.git
cd $NIXPATH/ && git init && git pull https://github.com/e-gun/HipparchiaNIX.git && git remote add origin https://github.com/e-gun/HipparchiaBSD.git
cd $THIRDPARTYPATH && $GIT init && $GIT pull https://github.com/e-gun/HipparchiaThirdPartySoftware.git
cd $WINDOWSPATH && $GIT init && $GIT pull https://github.com/e-gun/HipparchiaWindows.git
cd $EXTRAFONTPATH && $GIT init && $GIT pull https://github.com/e-gun/HipparchiaExtraFonts.git

sudo su root
	root# cat ~huser/hipparchia_venv/HipparchiaNIX/rc_conf.txt >> /etc/rc.conf
	root# /usr/local/etc/rc.d/postgresql initdb
	root# nano /var/db/postgres/data96/postgresql.conf [shared_buffers = 256MB]
	root# /usr/local/etc/rc.d/postgresql start
	root# HBACONF='/var/db/postgres/data10/pg_hba.conf'
	root# echo "host   $THEDB   hippa_rd,hippa_wr   127.0.0.1/32   password" >>  $HBACONF
	root# echo "local   $THEDB   hippa_rd,hippa_wr   password" >>  $HBACONF
	root# cat $NIXPATH/sysctl_conf_additions.txt >> /etc/sysctl.conf

sudo su postgres
	postgres$ createdb hipparchiaDB
	postgres$ /usr/local/bin/psql -d hipparchiaDB -a -f ~huser/hipparchia_venv/HipparchiaBuilder/builder/sql/generate_hipparchia_dbs.sql
	psql hipparchiaDB
		# [insert sql via generate_hipparchia_dbs.sql]
		# [but for the ownership problems it is: psql -d hipparchiaDB -a -f $BUILDERPATH/builder/sql/sample_generate_hipparchia_dbs.sql]
		# [need two roles (hippa_wr & hippa_rd) and authors and works tables]
	postgres$ exit

SSL="/usr/bin/openssl"

WRPASS=`${SSL} rand -base64 12`
RDPASS=`${SSL} rand -base64 12`
SKRKEY=`${SSL} rand -base64 24`
# you might have regex control chars in there if you are not lucky: 'VvIUkQ9CerGTo/sx5vneHeo+PCKpx7V5'
WRPASS=`echo ${WRPASS//[^[:word:]]/}`
RDPASS=`echo ${RDPASS//[^[:word:]]/}`
SKRKEY=`echo ${SKRKEY//[^[:word:]]/}`

printf "\n\n${WHITE}setting up your passwords in the configuration files${NC}\n"
printf "\t${RED}hippa_wr${NC} password will be: ${YELLOW}${WRPASS}${NC}\n"
printf "\t${RED}hippa_rd${NC} password will be: ${YELLOW}${RDPASS}${NC}\n"
printf "\t${RED}secret key${NC} will be: ${YELLOW}${SKRKEY}${NC}\n\n"

if [ ! -f "$BUILDERPATH/config.ini" ]; then
	sed "s/DBPASS = >>yourpasshere<</DBPASS = $WRPASS/" $BUILDERPATH/sample_config.ini > $BUILDERPATH/config.ini
	# note: this only works if pg_hba.conf has 'trust' in localhost for `whoami`
	/usr/local/bin/psql -d $THEDB --command="ALTER ROLE hippa_wr WITH PASSWORD '$WRPASS';"
else
	echo "oops - found old config.ini: will not change the password for hippa_wr"
	echo "nb: your OLD password is still there; you will need to change it to your NEW one ($WRPASS)"
fi

if [ ! -f "$LOADERPATH/config.ini" ]; then
	sed "s/DBPASS = yourpasshere/DBPASS = $WRPASS/" $LOADERPATH/sample_config.ini > $LOADERPATH/config.ini
fi

if [ ! -f "$SERVERPATH/config.py" ]; then
	sed "s/DBPASS = 'yourpassheretrytomakeitstrongplease'/DBPASS = '$RDPASS'/" $SERVERPATH/sample_config.py > $SERVERPATH/config.py
	sed -i "" "s/SECRET_KEY = 'yourkeyhereitshouldbelongandlooklikecryptographicgobbledygook'/SECRET_KEY = '$SKRKEY'/" $SERVERPATH/config.py
	sed -i "" "s/WRITEUSER = 'consider_re-using_HipparchiaBuilder_user'/WRITEUSER = 'hippa_wr'/" $SERVERPATH/config.py
	sed -i "" "s/DBWRITEPASS = 'consider_re-using_HipparchiaBuilder_pass'/DBWRITEPASS = '$WRPASS'/" $SERVERPATH/config.py	
	# note: this only works if pg_hba.conf has 'trust' in localhost for `whoami`
	# /usr/local/bin/psql -d $THEDB --command="ALTER ROLE hippa_rd WITH PASSWORD '$RDPASS';"
	# instead you will likely need to 'sudo su postgres; psql hipparchiaDB; \password hippa_rd; \q'
else
	echo "oops - found old config.py: will not change the password for hippa_rd"
	echo "nb: your OLD password is still there; you will need to change it to your NEW one ($RDPASS)"
fi

if [ ! -f "$BUILDERPATH/config.ini" ]; then
	sed "s/DBPASS = >>yourpasshere<</DBPASS = $WRPASS/" $BUILDERPATH/sample_config.ini > $BUILDERPATH/config.ini
	# note: this only works if pg_hba.conf has 'trust' in localhost for `whoami`
	# /usr/local/bin/psql -d $THEDB --command="ALTER ROLE hippa_wr WITH PASSWORD '$WRPASS';"
	# instead you will likely need to 'sudo su postgres; psql hipparchiaDB; \password hippa_wr; \q'
else
	echo "oops - found old config.ini: will not change the password for hippa_wr"
	echo "nb: your OLD password is still there; you will need to change it to your NEW one ($WRPASS)"
fi

if [ ! -f "$LOADERPATH/config.ini" ]; then
	sed "s/DBPASS = yourpasshere/DBPASS = $WRPASS/" $LOADERPATH/sample_config.ini > $LOADERPATH/config.ini
fi

if [ ! -f "$SERVERPATH/config.py" ]; then
	sed "s/DBPASS = 'yourpassheretrytomakeitstrongplease'/DBPASS = '$RDPASS'/" $SERVERPATH/sample_config.py > $SERVERPATH/config.py
	sed -i "" "s/SECRET_KEY = 'yourkeyhereitshouldbelongandlooklikecryptographicgobbledygook'/SECRET_KEY = '$SKRKEY'/" $SERVERPATH/config.py
	sed -i "" "s/WRITEUSER = 'consider_re-using_HipparchiaBuilder_user'/WRITEUSER = 'hippa_wr'/" $SERVERPATH/config.py
	sed -i "" "s/DBWRITEPASS = 'consider_re-using_HipparchiaBuilder_pass'/DBWRITEPASS = '$WRPASS'/" $SERVERPATH/config.py	
	# note: this only works if pg_hba.conf has 'trust' in localhost for `whoami`
	# /usr/local/bin/psql -d $THEDB --command="ALTER ROLE hippa_rd WITH PASSWORD '$RDPASS';"
else
	echo "oops - found old config.py: will not change the password for hippa_rd"
	echo "nb: your OLD password is still there; you will need to change it to your NEW one ($RDPASS)"
fi

cp $NIXPATH/uwsgi.ini ~/uwsgi.ini
cp $NIXPATH/selfupdate.sh ~/selfupdate.sh
cp $NIXPATH/cshrc.txt ~/.cshrc
source ~/.cshrc 
sudo cp $NIXPATH/ngingx_conf.txt /usr/local/etc/nginx/nginx.conf
sudo cp $NIXPATH/circusd.ini /usr/local/etc/circusd.ini
sudo cp $NIXPATH/circusd /usr/local/etc/rc.d/circusd
# you had best check the pf.conf rules lest you lock yourself out...
# if you don't know how to set them properly, then skipping the next it is the least bad option
sudo cp $NIXPATH/pf_conf.txt /etc/pf.conf


/usr/local/bin/python3.6 -m venv ~/hipparchia_venv/
source ~/hipparchia_venv/bin/activate.csh

# scipy & numpy will fail if pip tries to install them; can install from ports and copy into the venv
pkg install math/py-numpy
pkg install science/py-scipy
pkg install math/py-matplotlib
cp -rp /usr/local/lib/python3.6/site-packages/numpy* $HIPPHOME/lib/python3*/site-packages/
cp -rp /usr/local/lib/python3.6/site-packages/scipy* $HIPPHOME/lib/python3*/site-packages/
cp -rp /usr/local/lib/python3.6/site-packages/matplotlib* $HIPPHOME/lib/python3*/site-packages/
$HIPPHOME/bin/pip3 install flask psycopg2-binary websockets cython gensim sklearn pyLDAvis matplotlib networkx 


ln -s ~/hipparchia_venv/bin/circusctl ~/circusctl
ln -s /usr/local/etc/circusd.ini ~/the_circusd.ini
sudo cp ~/hipparchia_venv/bin/circusd /usr/local/bin/circusd
cp $SERVERPATH/sample_config.py $SERVERPATH/config.py
nano $SERVERPATH/config.py
cp $BUILDERPATH/sample_config.ini $BUILDERPATH/config.ini
nano $BUILDERPATH/config.ini
cp $LOADERPATH/sample_config.ini $LOADERPATH/config.ini
nano $LOADERPATH/config.ini

# [install jquery, fonts, etc. in $SERVERPATH/server/static/]

cd $TTF/
cp $THIRDPARTYPATH/minimal_installation/Noto*.zip $TTF/
cp $EXTRAFONTPATH/*.ttf $TTF/
cp $EXTRAFONTPATH/*.zip $TTF/

ZIPLIST=`ls -1 $TTF/*.zip`
for Z in $ZIPLIST; do unzip -o $Z; done

DBLSUBDIRS=`ls -d -1 $TTF/*/*/*.ttf`
for D in $DBLSUBDIRS; do mv $D $TTF/; done

INSUBDIRS=`ls -d -1 $TTF/*/*.ttf`
for F in $INSUBDIRS; do mv $F $TTF/; done

SUBDIRS=`ls -d -1 $TTF/*/`
for S in $SUBDIRS; do rm -rf $S; done

rm $TTF/*zip

# JS
cd $STATIC/
cp $THIRDPARTYPATH/minimal_installation/jquery-3.5.1.min.js $STATIC/jquery.min.js
cp $THIRDPARTYPATH/minimal_installation/jquery-ui-1.12.1.zip $STATIC/
cp $THIRDPARTYPATH/minimal_installation/js.cookie.js $STATIC/
cp $THIRDPARTYPATH/vector_helpers/*.* $STATIC/

ZIPLIST=`ls -1 $STATIC/*.zip`
for Z in $ZIPLIST; do unzip -o $Z; done
rm $STATIC/*zip
rm $STATIC/*md
rm $STATIC/LICENSE
rm $STATIC/d3.js
mv $STATIC/d3.min.js $STATIC/jsd3.js
mv $STATIC/ldavis.v1.0.0.js $STATIC/jsforldavis.js
cp $STATIC/jquery-ui-1.12.1/j* $STATIC/
cp $STATIC/jquery-ui-1.12.1/images/*.png $STATIC/images/
rm -rf $STATIC/jquery-ui-1.12.1/

# here comes the SHOWSTOPPER moment if you are going to be a HipparchiaBuilder
# if you do not have access to the data, then you can't build
# and this data is not available on github and unlikely ever to be available on github
# You need access to the TLG_E and PHI00005 and PHI7 disks. Get your hands on them.
# I do not know if other versions will build. They probably will.  

# NOTE: HipparchiaServer can and will run just fine with 0 languages and lexica actually installed. 
# Just don't expect to find anything in an empty database. 
# You probably want more than nothing. But there is no need to install more than you will use. 
# If you only install Latin literature, you will only be presented with Latin as a search option.

# OPTION ONE: BE BUILDER

# make the datafiles available where config.ini says they will be

# the lexica and grammatical analyses are not officially available anywhere that I know of. This material used to be distributed via the Perseus Hopper. No more?
# 
# BUILDING - ACQUIRING THE LEXICA OPTION A:
# use the files inside of Diogenes
mkdir $DATAPATH/lexica/
curl https://community.dur.ac.uk/p.j.heslin/Software/Diogenes/Download/diogenes-linux-3.2.0.tar.bz2 > $DATAPATH/lexica/diogenes-linux-3.2.0.tar.bz2
cd $DATAPATH/lexica/
tar jxf diogenes-linux-3.2.0.tar.bz2
mv $DATAPATH/lexica/diogenes-3.2.0/diogenes/perl/Perseus_Data/*.* $DATAPATH/lexica/
rm -rf $DATAPATH/lexica/diogenes-3.2.0/
mv $DATAPATH/lexica/1999.04.0057.xml $DATAPATH/lexica/greek-lexicon_1999.04.0057.xml
mv $DATAPATH/lexica/1999.04.0059.xml $DATAPATH/lexica/latin-lexicon_1999.04.0059.xml

# BUILDING - ACQUIRING THE LEXICA OPTION B [incomplete data / no Latin items]: 
# TLG:
# curl -LOk https://raw.githubusercontent.com/cltk/greek_lexica_perseus/master/greek_english_lexicon_lsj_1.xml > $DATAPATH/lexica/greek_english_lexicon_lsj_1.xml
# curl -LOk https://raw.githubusercontent.com/cltk/greek_lexica_perseus/master/greek_english_lexicon_lsj_2.xml > $DATAPATH/lexica/greek_english_lexicon_lsj_2.xml
# LEMMATA
# curl -LOk https://raw.githubusercontent.com/cltk/greek_lexica_perseus/master/greek-lemmata.txt > $DATAPATH/lexica/greek-lemmata.txt 
# ANALYSES
# curl -LOk https://raw.githubusercontent.com/cltk/greek_lexica_perseus/master/greek-analyses_1.txt > $DATAPATH/lexica/greek-analyses_1.txt
# curl -LOk https://raw.githubusercontent.com/cltk/greek_lexica_perseus/master/greek-analyses_2.txt > $DATAPATH/lexica/greek-analyses_2.txt

# if you have the builder data all properly in place, then...

cd $BUILDERPATH && ~/hipparchia_venv/bin/python3 ./makecorpora.py

# build times vary, but 10-40m per corpus should be possible on most machines. 
# 5-25m is achievable if you are a speed freak who knows how to optimize for your rig


# OPTION TWO: BE A RELOADER
# if you have access to a HipparchiaSQLoader dump, then...

# cd $LOADERPATH/ && ../bin/python ./reloadhipparchiaDBs.py 

# CONGRATULATIONS: Hipparchia's data has been installed
# you are now ready to run HipparchiaServer 

# [reboot]

